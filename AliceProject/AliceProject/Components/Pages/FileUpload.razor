@page "/upload/{testId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env
@attribute [Authorize()]

<PageTitle>File Upload</PageTitle>

<h3>File Upload</h3>
<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Default"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Choose Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>
@if (_files != null)
{
    <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
    <MudList T="string">
        @foreach (var file in _files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}


@*<InputFile OnChange="HandleFileSelected" multiple />*@
<MudButton Class="mt-4" Variant="Variant.Outlined" Size="Size.Small" OnClick="@HandleFileSelected">Upload Files</MudButton>
<MudButton Class="mt-4" Variant="Variant.Outlined" Size="Size.Small" OnClick="@ListUploadedFiles">List Uploaded Files</MudButton>
<ul>
    @foreach (var file in uploadedFiles)
    {
        <li>@file</li>
    }
</ul>
<h5>Data:</h5>
<ul>
    @foreach (var content in filecontents)
    {
        <li>@((MarkupString)content)</li>
    }
</ul>
@code {
    [Parameter]
    public String testId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    private String userId { get; set; }
    private List<string> uploadedFiles = new();
    private List<string> filecontents = new();

    protected override async Task OnInitializedAsync()
    {
        var authenticationstate = await authenticationStateTask;
        userId = authenticationstate.User.Claims.First(x => x.Type == "ID").Value;

    }
    private async void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            _files.Add(file);
        }
    }

    private async Task HandleFileSelected()
    {
        foreach (var file in _files)
        {
            var filePath = Path.Combine(env.WebRootPath, "Upload");
            filePath = Path.Combine(filePath, userId, testId);
            if (!Directory.Exists(filePath))
            {
                Directory.CreateDirectory(filePath);
            }
            filePath = Path.Combine(filePath, file.Name);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }
            uploadedFiles.Add(file.Name);
        }
    }
    private void ListUploadedFiles()
    {
        var uploadPath = Path.Combine(env.WebRootPath, "Upload", userId, testId);
        if (Directory.Exists(uploadPath))
        {
            var files = Directory.GetFiles(uploadPath);
            uploadedFiles = files.Select(file => Path.GetFileName(file)).ToList();
            foreach (var file in uploadedFiles)
            {
                String filedata = "";
                StreamReader sr = new StreamReader(uploadPath + "/" + file);
                while (!sr.EndOfStream)
                {
                    filedata += sr.ReadLine() + "<br>";
                }
                filecontents.Add(filedata);
            }
        }
    }
}