@page "/roles/users/{roleId}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IModelService<Role> RoleService
@inject IModelService<User> UserService
@inject ISnackbar Snackbar
@inject IBreadcrumbService BreadcrumbService
@attribute [Authorize(Roles = "admin")]


@if (users == null || roles == null || roleName == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <h3>@Capitalize(roleName) Users</h3>
    <MudTable Items="@users">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>FirstName</MudTh>
            <MudTh>LastName</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                <MudTd DataLabel="LastName">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd>
                    <MudSelect T="Guid" Label="Roles" @bind-Value="context.RoleId">
                        @foreach (var role in roles)
                        {
                            <MudSelectItem T="Guid" Value="@role.Id">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 100 }"
                               RowsPerPageString="@rowsPerPageString"
                               InfoFormat="@infoFormat"
                               AllItemsText="@allItemsText"
                               HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
        </MudTable>
        <MudButton Variant="Variant.Outlined" Class="mt-3" OnClick="@(() => ChangeRoles())">Save All</MudButton>
}

@code {
    [Parameter]
    public string roleId { get; set; }

    public string roleName { get; set; }

    private List<Models.User> users;
    private List<Models.Role> roles;
    private int selectedItem { get; set; }

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
        users = users.Where(x => x.RoleId == Guid.Parse(roleId)).ToList();
        roles = await RoleService.GetAll();
        roleName = roles.FirstOrDefault(x => x.Id == Guid.Parse(roleId)).Name;
        await BreadcrumbService.SetItems([new(text: "Roles", href: "/roles", icon: Icons.Material.Filled.Storage), new(roleName, $"/roles/users/{roleId}", icon: Icons.Material.Filled.EditNote)]);
        await BreadcrumbService.RefreshLayout();

    }
    private async void ChangeRoles()
    {
        foreach (var item in users)
        {
            await UserService.Update(item);
        }
        StateHasChanged();
        Navigation.Refresh(true);
        Snackbar.Add("Roles Updated!", Severity.Success);
    }
    private string Capitalize(string str)
    {
        if (str.Length == 0)
            return "";
        else if (str.Length == 1)
            return char.ToUpper(str[0])+"";
        else
            return char.ToUpper(str[0]) + str.Substring(1);
    }
}