@page "/tests/{testId}/cases/add"
@rendermode InteractiveServer
@inject IWebHostEnvironment env
@inject IDialogService DialogService
@inject IModelService<TestCase> TestCaseService
@inject IModelService<Test> TestService
@inject IBreadcrumbService BreadcrumbService
@inject IFileHandlingService FileHandlingService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@attribute [Authorize()]

<h3>Add Test Case</h3>

<MudPaper Elevation="2" Class="px-16 py-8 ma-2">
    <MudTextField @bind-Value="name" Label="Test Case Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        @if (_inputfiles.Count != 0)
        {
             <MudItem xs="12" md="12" Class="d-flex align-items-center mt-5" Style="max-width:500px;">
                @foreach (var file in _inputfiles)
                {
                    <MudItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                    </MudItem>
                }
                <MudSpacer />
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadInputFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default">
                            Replace Input File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
        }
        else
        {
        <MudItem xs="12" md="12" Class="d-flex align-items-center mt-5" Style="max-width:500px;">
                <MudText>No File uploaded!</MudText>
                <MudSpacer />
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadInputFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default">
                            Choose Input File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
        }

        @if (_outputfiles.Count != 0)
        {
        <MudItem xs="12" md="12" Class="d-flex align-items-center mt-5" Style="max-width:500px;">
                @foreach (var file in _outputfiles)
                {
                    <MudItem  Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                    </MudItem>
                }
                <MudSpacer />
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadOutputFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default">
                            Replace Output File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
        }
        else
        {
        <MudItem xs="12" md="12" Class="d-flex align-items-center mt-5" Style="max-width:500px;">
                <MudText>No File uploaded!</MudText>
                <MudSpacer />
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadOutputFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default">
                            Choose Output File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
        }
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="InsertTest">Save</button>
</MudPaper>
@code {
    [Parameter]
    public string testId { get; set; }

    private Guid newGuid = Guid.NewGuid();

    private string name;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    IList<IBrowserFile> _inputfiles = new List<IBrowserFile>();
    IList<IBrowserFile> _outputfiles = new List<IBrowserFile>();
    private bool disableUpload { get; set; } = true;

    private String userId { get; set; }
    private List<string> uploadedFiles = new();
    private List<string> filecontents = new();
    private List<TestCase> testCases = new();
    private String uploadPath = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationstate = await authenticationStateTask;
        userId = authenticationstate.User.Claims.First(x => x.Type == "ID").Value;
        uploadPath = Path.Combine(env.WebRootPath, "Upload", userId, testId, "TestCases", newGuid.ToString());
        var test = await TestService.Get(Guid.Parse(testId));
        await BreadcrumbService.SetItems([
            new(text: "Tests", href: "/tests", icon: Icons.Material.Filled.AllInbox), 
            new(test.Name, $"/test/{testId}/open", icon: Icons.Material.Filled.EditNote),
            new("TestCases", $"/tests/{testId}/cases", icon: Icons.Material.Filled.Storage), 
            new("Add", $"/tests/{testId}/cases/add", icon: Icons.Material.Filled.EditNote)]);
        await BreadcrumbService.RefreshLayout();
    }

    private async Task UploadInputFile(IBrowserFile file)
    {
        if (_inputfiles.Count != 0)
        {
            await FileHandlingService.RemoveFiles(Path.Combine(uploadPath, "Input"), _inputfiles);
        }
        _inputfiles.Clear();
        _inputfiles.Add(file);
        FileHandlingService.CreateTestFile(Path.Combine(uploadPath, "Input"), _inputfiles);
    }
    private async Task UploadOutputFile(IBrowserFile file)
    {
        if (_outputfiles.Count != 0)
        {
            await FileHandlingService.RemoveFiles(Path.Combine(uploadPath, "Output"), _outputfiles);
        }
        _outputfiles.Clear();
        _outputfiles.Add(file);
        FileHandlingService.CreateTestFile(Path.Combine(uploadPath, "Output"), _outputfiles);
    }

    private async Task InsertTest()
    {
        if (_inputfiles.Count == 0 || _outputfiles.Count == 0)
        {
            Snackbar.Add("Kötelező feltölteni be és kimeneti fájlokat a teszteléshez!", Severity.Error);
            return;
        }

        var testcase = new TestCase
        {
            Id = newGuid,
            Name = name,
            Input = _inputfiles[0].Name,
            ExpectedOutput = _outputfiles[0].Name,
            TestId = Guid.Parse(testId)
        };
        await TestCaseService.Add(testcase);
        Navigation.NavigateTo($"/tests/{testId}/cases");
        StateHasChanged();
    }

    private async void Cancel()
    {
        if (_inputfiles.Count != 0 )
        {
            await FileHandlingService.RemoveFile(Path.Combine(uploadPath, "Input"), _inputfiles[0].Name);
        }
        if (_outputfiles.Count != 0)
        {
            await FileHandlingService.RemoveFile(Path.Combine(uploadPath, "Output"), _outputfiles[0].Name);
        }

        Navigation.NavigateTo($"/tests/{testId}/cases");
    }
}