@page "/users/add"
@rendermode InteractiveServer
@using AliceProject.Helpers
@using AliceProject.Models
@inject IModelService<User> UserService
@inject IModelService<Role> RoleService
@inject IBreadcrumbService BreadcrumbService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "admin")]

<h3>Add New User</h3>
@if (roles == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudPaper Elevation="2" Class="px-16 py-8 ma-2">
        <MudTextField @bind-Value="newUserFirstName" Label="First Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudTextField @bind-Value="newUserLastName" Label="Last Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudTextField @bind-Value="emailAddress" Label="Email Address" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Email"></MudTextField>
        <MudTextField @bind-Value="newPassword" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password"></MudTextField>
        <select class="form-control" name="roles" id="roles" @onchange="(e => ChangeRole(e))">
            <option value="choose">Choose!</option>
            @foreach (var role in roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </select>
        <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="@Cancel">Cancel</MudButton>
        <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="@InsertUser">Save</MudButton>
    </MudPaper>
}

<button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
<button class="btn btn-primary" @onclick="InsertUser">Save</button>

@code {
    private string newUserFirstName;
    private string newUserLastName;
    private string emailAddress;
    private string newPassword;
    private string newrole;

    private List<Models.Role> roles;

    private async void ChangeRole(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "choose")
        {
            newrole = e.Value.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleService.GetAll();
        await BreadcrumbService.SetItems([new(text: "Users", href: "/users", icon: Icons.Material.Filled.Storage), new(text: "Add", href: "/users/add", icon: Icons.Material.Filled.Add)]);
        await BreadcrumbService.RefreshLayout();
    }

    private async Task InsertUser()
    {
        if (newUserFirstName == null || newUserLastName == null || emailAddress == null || newPassword == null || newrole == null ||
            newUserFirstName == "" || newUserLastName == "" || emailAddress == "" || newPassword == "" || newrole == "choose")
        {
            Snackbar.Add("You must fill all field!", Severity.Error);
        }
        else
        {
            var user = new Models.User
                {
                    FirstName = newUserFirstName,
                    LastName = newUserLastName,
                    Email = emailAddress,
                    Password = new PasswordHandling().Hash(newPassword),
                    RoleId = Guid.Parse(newrole)
                };
            await UserService.Add(user);

            Navigation.NavigateTo("/users");
            StateHasChanged();
            Snackbar.Add("user Added!", Severity.Success);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/users");
    }
}