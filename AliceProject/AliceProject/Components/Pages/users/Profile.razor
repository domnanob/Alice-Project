@page "/profile"
@rendermode InteractiveServer
@using AliceProject.Helpers
@using AliceProject.Models
@inject IModelService<User> UserService
@inject IBreadcrumbService BreadcrumbService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@attribute [Authorize()]

<h3>Edit Profile</h3>

@if (user == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudPaper Elevation="2" Class="px-16 py-8 ma-2">
        <MudTextField @bind-Value="user.FirstName" Label="First Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudTextField @bind-Value="user.LastName" Label="Last Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudTextField @bind-Value="user.Email" Label="Email Address" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Email"></MudTextField>
        <MudTextField @bind-Value="password" Label="New Password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password"></MudTextField>
        <MudTextField @bind-Value="passwordAgain" Label="New Password Again" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password"></MudTextField>

        <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="@Cancel">Cancel</MudButton>
        <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="@UpdateUser">Save</MudButton>
    </MudPaper>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private String userId;
    private Models.User user;
    private String password;
    private String passwordAgain;

    protected override async Task OnInitializedAsync()
    {
        var authenticationstate = await authenticationStateTask;
        userId = authenticationstate.User.Claims.First(x => x.Type == "ID").Value;
        user = await UserService.Get(Guid.Parse(userId));
        await BreadcrumbService.SetItems([new(text: "Profile", href: "/profile", icon: Icons.Material.Filled.Edit)]);
        await BreadcrumbService.RefreshLayout();
    }

    private async Task UpdateUser()
    {
        if (password != null && password != "")
        {
            if (password == passwordAgain)
            {
                user.Password = new PasswordHandling().Hash(password);
            }
            else
            {
                Snackbar.Add("Two passwords doesn't match!", Severity.Error);
                return;
            }
        }

        await UserService.Update(user);

        Navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
}