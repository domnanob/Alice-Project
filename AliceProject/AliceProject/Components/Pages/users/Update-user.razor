@page "/users/update/{userId}"
@rendermode InteractiveServer
@using AliceProject.Helpers
@using AliceProject.Models
@inject IModelService<User> UserService
@inject IBreadcrumbService BreadcrumbService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "admin")]

<h3>Update User</h3>

@if (user == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstName" @bind="user.FirstName" />
    </div>
    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="lastName" @bind="user.LastName" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email Address</label>
        <input type="email" class="form-control" id="email" @bind="user.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" @bind="password" />
    </div>
    <div class="mb-3">
        <label for="passwordagain" class="form-label">Password Again</label>
        <input type="password" class="form-control" id="passwordagain" @bind="passwordAgain" />
    </div>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="UpdateUser">Save</button>
}

@code {
    [Parameter]
    public String userId { get; set; }

    private Models.User user;
    private String password;
    private String passwordAgain;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.Get(Guid.Parse(userId));
        await BreadcrumbService.SetItems([new(text: "Users", href: "/users", icon: Icons.Material.Filled.Storage), new(text: "Edit", href: $"/users/update/{userId}", icon: Icons.Material.Filled.Edit)]);
        await BreadcrumbService.RefreshLayout();
    }

    private async Task UpdateUser()
    {
        if (password != null && password != "")
        {
            if (password == passwordAgain)
            {
                user.Password = new PasswordHandling().Hash(password);
            }
            else
            {
                return;
            }
        }

        await UserService.Update(user);

        Navigation.NavigateTo("/users");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/users");
    }
}