@page "/users"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IBreadcrumbService BreadcrumbService
@inject IDialogService DialogService
@inject IModelService<User> UserService
@inject IModelService<Test> TestService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar
@inject IFileHandlingService FileHandlingService
@attribute [Authorize(Roles="admin")]
<h3>Users Table</h3>
@if (users == null)
{
    <MudPaper Class="d-flex mt-8 align-center text-center flex-grow-1 gap-4" Elevation="0">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </MudPaper>
}
else
{
    <MudTable Items="@users">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>FirstName</MudTh>
            <MudTh>LastName</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.FirstName</MudTd>
            <MudTd DataLabel="Name">@context.LastName</MudTd>
            <MudTd DataLabel="Position">@context.Email</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToTests(context.Id))">Tests</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToUpdate(context.Id))">Update</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => DeleteUser(context.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 100 }"
                               RowsPerPageString="@rowsPerPageString"
                               InfoFormat="@infoFormat"
                               AllItemsText="@allItemsText"
                               HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
    </MudTable>
    <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="@OpenAddUserModal">Add New User</MudButton>
}


@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private List<Models.User> users;
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
        await BreadcrumbService.SetItems([new(text: "Users", href: "/users", icon: Icons.Material.Filled.Storage)]);
        await BreadcrumbService.RefreshLayout();
    }

    private void OpenAddUserModal()
    {
        Navigation.NavigateTo("/users/add");
    }

    private void NavigateToUpdate(Guid userId)
    {
        Navigation.NavigateTo($"/users/update/{userId}");
    }
    private void NavigateToTests(Guid userId)
    {
        Navigation.NavigateTo($"/tests/{userId}");
    }
    private async Task DeleteUser(Guid userId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<Dialogs.CodeDialog>
        {
            { x => x.DialogTitle, "Delete User"},
            { x => x.ContentText, "Are you sure about to delete "+(await UserService.Get(userId)).LastName+"?"}
        };
        var d = await DialogService.ShowAsync<Dialogs.ConfirmDialog>("Confirm Dialog", parameters, options);
        var result = await d.Result;
        if (!result.Canceled)
        {
            string uploadPath = Path.Combine(env.WebRootPath, "Upload", userId.ToString());
            await FileHandlingService.RemoveAllFiles(uploadPath);

            List<Test> userTests = await TestService.GetAll();
            userTests = userTests.Where(x => x.UserId == userId).ToList();
            foreach (var item in userTests)
            {
                await TestService.Delete(item.Id);
            }
            await UserService.Delete(userId);

            users = await UserService.GetAll();
            Snackbar.Add("User Removed!", Severity.Success);
        }
    }
}