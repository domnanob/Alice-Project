@page "/users"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IBreadcrumbService BreadcrumbService
@inject IModelService<User> UserService
@attribute [Authorize(Roles="admin")]
<h3>Users Table</h3>
@if (users == null)
{
    <MudPaper Class="d-flex mt-8 align-center text-center flex-grow-1 gap-4" Elevation="0">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </MudPaper>
}
else
{
    <MudTable Items="@users">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>FirstName</MudTh>
            <MudTh>LastName</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.FirstName</MudTd>
            <MudTd DataLabel="Name">@context.LastName</MudTd>
            <MudTd DataLabel="Position">@context.Email</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToUpdate(context.Id))">Update</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => DeleteUser(context.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 100 }"
                               RowsPerPageString="@rowsPerPageString"
                               InfoFormat="@infoFormat"
                               AllItemsText="@allItemsText"
                               HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
    </MudTable>
    <MudButton Class="mt-4" Variant="Variant.Outlined" Size="Size.Small" OnClick="@OpenAddUserModal">Add New User</MudButton>
}


@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private List<Models.User> users;
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
        await BreadcrumbService.SetItems([new(text: "Users", href: "/users", icon: Icons.Material.Filled.Storage)]);
        await BreadcrumbService.RefreshLayout();
    }

    private void OpenAddUserModal()
    {
        Navigation.NavigateTo("/users/add");
    }

    private void NavigateToUpdate(Guid userId)
    {
        Navigation.NavigateTo($"/users/update/{userId}");
    }

    private async Task DeleteUser(Guid userId)
    {

        await UserService.Delete(userId);

        users = await UserService.GetAll();
    }
}