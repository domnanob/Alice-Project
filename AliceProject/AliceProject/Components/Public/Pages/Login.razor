@page "/public/login"
@using AliceProject.Components.Layout
@using AliceProject.Helpers
@using AliceProject.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject NavigationManager navigationManager
@inject IModelService<User> UserService
@inject IModelService<Role> RoleService
@inject IBreadcrumbService BreadcrumbService

<PageTitle>Login</PageTitle>
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Elevation="1" Class="pa-6" MaxWidth="400px">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <div class="mb-3 text center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Inherit">Login</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>
@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    [Inject] ISnackbar Snackbar { get; set; }


    private List<User> users;
    private List<Role> roles;
    private string errorMessage;

    protected override async Task OnInitializedAsync() {
        Layout.LoginLayout();
        users = await UserService.GetAll();
        roles = await RoleService.GetAll();
    }


    private async Task Authenticate(EditContext context)
    {
        User userAccount = users.Where(x => x.Email == Model.Email).FirstOrDefault();
        if (userAccount is null || !(new PasswordHandling().Verify(Model.Password, userAccount.Password)))
        {
            errorMessage = "Invalid Email or Password";

        }
        else
        {
            var role = roles.Where(x => x.Id == userAccount.RoleId).FirstOrDefault();
            var claims = new List<Claim>
            {
                new Claim("ID", userAccount.Id+""),
                new Claim(ClaimTypes.Email, userAccount.Email),
                new Claim(ClaimTypes.Role, role.Name)
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            navigationManager.NavigateTo("/");
        }
    }
}