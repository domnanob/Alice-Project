@page "/public/register"
@using AliceProject.Models.ViewModels
@using AliceProject.Helpers

@inject NavigationManager navigationManager
@inject IModelService<User> UserService
@inject IModelService<Role> RoleService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Elevation="1" Class="pa-6" MaxWidth="400px">
        <EditForm Model="@Model" OnValidSubmit="Registration" FormName="RegistrationForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text center flex-column">
                <h3>Registration</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="Model.FirstName" class="form-control" placeholder="Jhon" />
                <ValidationMessage For="() => Model.FirstName" />
            </div>
            <div class="mb-3">
                <label>Last Name</label>
                <InputText @bind-Value="Model.LastName" class="form-control" placeholder="Doe" />
                <ValidationMessage For="() => Model.LastName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <label>Password Again</label>
                <InputText type="password" @bind-Value="Model.PasswordAgain" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.PasswordAgain" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Inherit">Register</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();
    private string? errorMessage;

    private List<User> users;
    private List<Role> roles;
    private Role userRole;


    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
        roles = await RoleService.GetAll();
        userRole = roles.Where(x => x.Name == "user").FirstOrDefault();

    }


    private async Task Registration()
    {
        var userAccount = users.Where(x => x.Email == Model.Email).FirstOrDefault();
        if (userAccount is null)
        {
            if (Model.Password == Model.PasswordAgain)
            {
                await UserService.Add(new User()
                    {
                        Email = Model.Email,
                        FirstName = Model.FirstName,
                        LastName = Model.LastName,
                        Password = new PasswordHandling().Hash(Model.Password),
                        RoleId = userRole.Id,
                    });
                navigationManager.NavigateTo("/public/login");
            }
            else
            {
                errorMessage = "Passwords not match!";
            }
        }
        else
        {
            errorMessage = "This email is already used!";
        }
    }

}