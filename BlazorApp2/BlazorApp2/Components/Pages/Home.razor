@page "/"
@inject NotificationService NotificationService
@inject ToastService ToastService
@inject ModalService ModalService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<Button Color="ButtonColor.Primary" @onclick="() => ShowMessage()">Primary Toast</Button>
<Button Color="ButtonColor.Primary" @onclick="() => ShowModal(ModalType.Primary)">Show Primary Modal</Button>
<RadzenRow Gap="1rem" RowGap="1rem" class="rz-m-0 rz-m-md-12">
    <RadzenColumn Size="12" SizeMD="3">
        <RadzenCard Variant="Radzen.Variant.Flat" class="rz-background-color-info-lighter">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info</RadzenText>
            <RadzenButton Text="Show info notification" Style="width: 100%;"
                ButtonStyle="ButtonStyle.Info"
                Click=@(args => ShowNotification())/>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<MudExpansionPanels>
    <MudExpansionPanel Text="Panel One" MaxHeight="150" Expanded="true">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text="Panel Two" MaxHeight="500">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text="Panel Three" MaxHeight="1000">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text="Panel Four">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>


@code {
    public void ShowMessage()
    {
        ToastService.Notify(new(ToastType.Success, $"Employee details saved successfully."));
    }
    private void OnThemeChanged(string themeName)
    {
        // do something when the theme changes
        ToastService.Notify(new(ToastType.Success, $"Theme changed to {themeName}"));
    }
    private async Task ShowModal(ModalType modalType)
    {
        var modalOption = new ModalOption
            {
                Title = "Modal title",
                Message = "Modal body text goes here.",
                Type = modalType,
                IsVerticallyCentered = true
            };

        await ModalService.ShowAsync(modalOption);
    }
    void ShowNotification()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Info Summary", Detail = "Info Detail", Duration = 4000 });

    }
}