@page "/tests/{testId}/cases"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject BlazorApp2.Services.IModelService<Test> TestService
@inject BlazorApp2.Services.IModelService<TestCase> TestCaseService
@inject BlazorApp2.Services.IBreadcrumbService BreadcrumbService
@attribute [Authorize()]

@if (testCases == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <h3>@test.Name Cases</h3>
    <MudTable Items="@testCases">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Expected Output</MudTh>
            <MudTh>Input</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Sign">@context.ExpectedOutput</MudTd>
                <MudTd DataLabel="Sign">@context.Input</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => DeleteTest(context.Id))">Delete</MudButton>
               </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 100 }"
                               RowsPerPageString="@rowsPerPageString"
                               InfoFormat="@infoFormat"
                               AllItemsText="@allItemsText"
                               HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
        </MudTable>
    <MudButton Class="mt-4" Variant="Variant.Outlined" Size="Size.Small" OnClick="@OpenAddTestCasesModal">Add New Test</MudButton>

}

@code {
    [Parameter]
    public string testId { get; set; }

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private List<TestCase> testCases;
    private Test test;

    protected override async Task OnInitializedAsync()
    {
        test = await TestService.Get(Guid.Parse(testId));
        List<TestCase> testcases = await TestCaseService.GetAll();
        testCases = testcases.Where(x => x.TestId == Guid.Parse(testId)).ToList();
        await BreadcrumbService.AddItem(new("TestCases", "/users"));

    }
    private async Task DeleteTest(Guid testId)
    {
        await TestCaseService.Delete(testId);

        List<TestCase> testcases = await TestCaseService.GetAll();
        testCases = testcases.Where(x => x.TestId == Guid.Parse(this.testId)).ToList();
    }
    private void OpenAddTestCasesModal()
    {
        Navigation.NavigateTo($"/tests/{testId}/cases/add");
    }

}