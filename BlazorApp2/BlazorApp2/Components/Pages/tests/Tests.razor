@page "/tests"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IWebHostEnvironment env
@inject BlazorApp2.Services.IModelService<Test> TestService
@inject BlazorApp2.Services.IBreadcrumbService BreadcrumbService
@inject BlazorApp2.Services.IFileHandlingService FileHandlingService
@attribute [Authorize()]
<h3>Tests</h3>

@if (tests == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="@tests">
        <ColGroup>
            <col style="width: 50%;" />
            <col style="width: 50%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Sign">@context.Name</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => UploadTest(context.Id))">Open</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToTestCases(context.Id))">Cases</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToTest(context.Id))">Edit</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => DeleteTest(context.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 100 }"
                RowsPerPageString="@rowsPerPageString"
                InfoFormat="@infoFormat"
                AllItemsText="@allItemsText"
                HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
        </MudTable>
    <MudButton Class="mt-4" Variant="Variant.Outlined" Size="Size.Small" OnClick="@OpenAddTestModal">Add New Test</MudButton>

}

@code {
    public string userId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Models.Test> tests;
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    protected override async Task OnInitializedAsync()
    {
        var authenticationstate = await authenticationStateTask;
        userId = authenticationstate.User.Claims.First(x => x.Type == "ID").Value;
        tests = await TestService.GetAll();
        tests = tests.Where(x => x.UserId == Guid.Parse(userId)).ToList();
        await BreadcrumbService.SetItems([new(text: "Tests", href: "/tests", icon: Icons.Material.Filled.AllInbox)]);
        await BreadcrumbService.RefreshLayout();
    }
    private async Task DeleteTest(Guid testId)
    {
        string uploadPath = Path.Combine(env.WebRootPath, "Upload", userId, testId.ToString());
        await FileHandlingService.RemoveAllFiles(uploadPath);

        await TestService.Delete(testId);
        tests = await TestService.GetAll();
    }
    private async Task UploadTest(Guid testId)
    {
        Navigation.NavigateTo($"/test/{testId}/open");
    }
    private void OpenAddTestModal()
    {
        Navigation.NavigateTo($"/tests/{userId}/add");
    }

    private void NavigateToTest(Guid testId)
    {
        Navigation.NavigateTo($"/tests/update/{testId}");
    }
    private void NavigateToTestCases(Guid testId)
    {
        Navigation.NavigateTo($"/tests/{testId}/cases");
    }

}