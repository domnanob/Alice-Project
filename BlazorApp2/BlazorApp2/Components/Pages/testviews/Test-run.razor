@page "/test/{testId}/run"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject BlazorApp2.Services.IModelService<Test> TestService
@inject BlazorApp2.Services.IModelService<TestCase> TestCaseService
@inject BlazorApp2.Services.IModelService<StudentTest> StudentTestService
@inject BlazorApp2.Services.IBreadcrumbService BreadcrumbService
@inject BlazorApp2.Services.IFileHandlingService FileHandlingService
@inject BlazorApp2.Services.IFileCompilerService FileCompilerService
@inject ISnackbar Snackbar

@attribute [Authorize()]

<PageTitle>Test View</PageTitle>
<MudGrid Spacing="10">
    <MudItem xs="12" lg="5">
        <MudPaper Elevation="2" Class="d-flex overflow-x-auto overflow-y-auto align-start justify-start mud-width-full py-8" Height="500px">
            <MudList T="string" Class="pa-2" Style="width:100%;">
                <MudListSubheader>
                    Submitted programs
                </MudListSubheader>
                @if (studentTests.Count != 0)
                {
                    @foreach (var stest in studentTests)
                    {
                        <MudListItem Text="@stest.StudentName" OnClick="()=>ChangeSelectedTest(stest)" Style="width:100%;" Icon="@Icons.Custom.FileFormats.FileCode" />
                    }
                }
                else
                {
                    <MudListItem>No files uploaded!</MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="2">
        <MudPaper Elevation="2" Class="d-flex flex-column align-center justify-center mud-width-full" Height="500px">
            <MudItem xs="6" lg="6" Class="d-flex flex-column text-center justify-content-center">
                <MudSelect Class="mt-5" T="TestResult" Label="Test Case" @bind-Value="selectedTestResult">
                    @foreach (var test in testResults)
                    {
                        <MudSelectItem T="TestResult" Value="@test">@test.Testcase.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Outlined" OnClick="SelectedTestCompile">Run Test</MudButton>
                <MudButton Class="mt-2 mb-2" Variant="Variant.Outlined" OnClick="AllTestCompile">Run All Test</MudButton>
            </MudItem>
            <MudDivider />
            <MudItem xs="6" lg="6" Class="text-center">
                <MudText Class="mt-5" Typo="Typo.h5">Results</MudText>
                @if (testResult != null)
                {
                    <MudText Class="mt-5">@testResult</MudText>
                } else
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                }
            </MudItem>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="5">
        <MudPaper Elevation="2" Class="overflow-x-auto overflow-y-auto align-start justify-start mud-width-full py-8 px-5" Height="500px">
                <MudListSubheader Class="pa-2 mt-2">
                    Programcode
                </MudListSubheader>
            <MudText Class="pa-2">
                <pre>
                    @((MarkupString)@selectedTestCode)
                </pre>
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudExpansionPanels Elevation="2" MultiExpansion="true" Class="mt-5">
    @foreach (var item in testResults)
    {
        <MudExpansionPanel HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Class="mt-1">@item.Testcase.Name</MudText>
                        @if (item.State == TestState.Unknown)
                        {
                            <MudIcon Class="d-flex ml-auto" Icon="@Icons.Material.Filled.GppMaybe" Color="Color.Warning" />
                        }
                        else if (item.State == TestState.Passed)
                        {
                            <MudIcon Class="d-flex ml-auto" Icon="@Icons.Material.Filled.GppGood" Color="Color.Success" />
                        } else
                        {
                            <MudIcon Class="d-flex ml-auto" Icon="@Icons.Material.Filled.GppBad" Color="Color.Error" />
                        }
                </div>
            </TitleContent>
            <ChildContent>
                <MudGrid>
                    <MudItem xs="12" lg="4">
                        <MudPaper Elevation="0" Class="overflow-x-auto overflow-y-auto align-start justify-start mud-width-full py-8 px-5" Height="200px">
                            <MudListSubheader Class="pa-2 mt-2">
                                Input
                            </MudListSubheader>
                            <MudText Class="pa-2">
                                @((MarkupString)item.Input)
                            </MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" lg="4">
                        <MudPaper Elevation="0" Class="overflow-x-auto overflow-y-auto align-start justify-start mud-width-full py-8 px-5" Height="200px">
                            <MudListSubheader Class="pa-2 mt-2">
                                Expected Outpud
                            </MudListSubheader>
                            <MudText Class="pa-2">
                                @((MarkupString)item.ExpectedOutput)
                            </MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" lg="4">
                        <MudPaper Elevation="0" Class="overflow-x-auto overflow-y-auto align-start justify-start mud-width-full py-8 px-5" Height="200px">
                            <MudListSubheader Class="pa-2 mt-2">
                                Real Output
                            </MudListSubheader>
                            @if (item.State == TestState.Unknown)
                            {
                                <MudText Class="pa-2">@((MarkupString)item.Output)</MudText>
                            }
                            else if (item.State == TestState.Passed)
                            {
                                <MudText Color="Color.Success" Class="pa-2">@((MarkupString)item.Output)</MudText>
                            }
                            else
                            {
                                <MudText Color="Color.Error" Class="pa-2">@((MarkupString)item.Output)</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>


@code {
    [Parameter]
    public String testId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private String userId { get; set; }
    private List<TestCase> testCases = new();
    private List<StudentTest> studentTests = new();
    private String uploadPath = "";
    private String selectedTestCode = "No item selected!";
    private String selectedTestName = "";
    private TestResult? selectedTestResult = null;
    private string? testResult = "";
    private List<TestResult> testResults = new();


    enum TestState
    {
        Unknown,
        Passed,
        Failed
    }
    class TestResult
    {
        public TestResult(TestCase test, TestState state)
        {
            Testcase = test;
            State = state;
        }
        public TestCase Testcase { get; set; }
        public TestState State { get; set; }
        public String Input { get; set; }
        public String ExpectedOutput { get; set; }
        public String Output { get; set; } = "No Results.";

    }

    private async void SelectedTestCompile()
    {
        if (selectedTestResult == null)
        {
            Snackbar.Add("No test case selected!", Severity.Error);
            return;
        }
        if (selectedTestName == "")
        {
            Snackbar.Add("No test selected!", Severity.Error);
            return;
        }
        await RunTestCompile(selectedTestResult);
    }
    private async Task RunTestCompile(TestResult testres)
    {
        //ez miert nem?
        testResult = null;
        StateHasChanged();

        string caseuploadPath = Path.Combine(env.WebRootPath, "Upload", userId, testId, "TestCases", testres.Testcase.Id.ToString());
        string testInputs = await FileHandlingService.ReadFileContentFormatted(Path.Combine(caseuploadPath, "Input", testres.Testcase.Input));
        String res = await FileCompilerService.ExecuteCommand(uploadPath + "/", selectedTestName, testInputs.Split("<br>"));
        await FileHandlingService.RemoveFile(uploadPath + "/", selectedTestName + ".exe");

        List<string> resultList = res.Split("\n\r\n")[1].Split("\r\n").ToList();
        List<string> testOutput = await FileHandlingService.ReadFileContentRaw(Path.Combine(caseuploadPath, "Output", testres.Testcase.ExpectedOutput));
        testres.Output = string.Join("<br>", resultList);
        if (CompareOutputs(resultList, testOutput))
        {
            testres.State = TestState.Passed;
        }
        else
        {
            testres.State = TestState.Failed;
        }
        testResult = testResults.Count(x => x.State == TestState.Passed) + "/" + (testResults.Count(x => x.State == TestState.Passed) + testResults.Count(x => x.State == TestState.Failed)) + "Passed";
        StateHasChanged();
    }
    private async void AllTestCompile()
    {
        if (selectedTestName == "")
        {
            Snackbar.Add("No test selected!", Severity.Error);
            return;
        }
        foreach (var item in testResults)
        {
            await RunTestCompile(item);
        }
    }
    private bool CompareOutputs(List<String> out1, List<String> out2)
    {
        try //ha több output van mint kellene exception lesz
        {
            for (int i = 0; i < out1.Count - 1; i++) //az utolso egyures string mindig
            {
                if (out1[i] != out2[i])
                {
                    return false;
                }
            }
        }
        catch
        {
            return false;
        }
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationstate = await authenticationStateTask;
        testCases = await TestCaseService.GetAll();
        studentTests = await StudentTestService.GetAll();
        userId = authenticationstate.User.Claims.First(x => x.Type == "ID").Value;

        testCases = testCases.Where(x => x.TestId == Guid.Parse(testId)).ToList();
        testCases.ForEach( async x => { 
            testResults.Add(new TestResult(x, TestState.Unknown)
            {
                    Input = await FileHandlingService.ReadFileContentFormatted(Path.Combine(env.WebRootPath, "Upload", userId, testId, "TestCases", x.Id.ToString(), "Input", x.Input)),
                    ExpectedOutput = await FileHandlingService.ReadFileContentFormatted(Path.Combine(env.WebRootPath, "Upload", userId, testId, "TestCases", x.Id.ToString(), "Output", x.ExpectedOutput)),
            }); 
        });

        studentTests = studentTests.Where(x => x.TestId == Guid.Parse(testId)).ToList();
        uploadPath = Path.Combine(env.WebRootPath, "Upload", userId, testId);
        var currentTest = await TestService.Get(Guid.Parse(testId));

        await BreadcrumbService.SetItems([new(text: "Tests", href: "/tests", icon: Icons.Material.Filled.AllInbox), new(currentTest.Name, $"/test/{testId}/open", icon: Icons.Material.Filled.EditNote), new("Run", $"/test/{testId}/run", icon: @Icons.Material.Filled.Checklist)]);
        await BreadcrumbService.RefreshLayout();
    }

    private async void ChangeSelectedTest(StudentTest studentTest)
    {
        selectedTestCode = await FileHandlingService.ReadFileContentFormatted(uploadPath + "/" + studentTest.StudentName);
        selectedTestName = studentTest.StudentName.Replace(".cs","");

        testResults.ForEach(x =>
        {
            x.State = TestState.Unknown;
            x.Output = "No Results.";
        });
        testResult = "";
        StateHasChanged();
    }

    private void NavigateToCases()
    {
        Navigation.NavigateTo($"/tests/{testId}/cases");
    }
}